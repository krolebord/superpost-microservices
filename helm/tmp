---
# Source: ms/charts/rabbitmq/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-11.3.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
secrets:
  - name: rabbitmq
---
# Source: ms/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: postgres
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.1.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "bXlzZWNyZXRwYXNzd29yZA=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: ms/charts/rabbitmq/templates/config-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: rabbitmq-config
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-11.3.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  rabbitmq.conf: |-
    IyMgVXNlcm5hbWUgYW5kIHBhc3N3b3JkCiMjCmRlZmF1bHRfdXNlciA9IHJhYmJpdG1xCiMjIENsdXN0ZXJpbmcKIyMKY2x1c3Rlcl9mb3JtYXRpb24ucGVlcl9kaXNjb3ZlcnlfYmFja2VuZCAgPSByYWJiaXRfcGVlcl9kaXNjb3ZlcnlfazhzCmNsdXN0ZXJfZm9ybWF0aW9uLms4cy5ob3N0ID0ga3ViZXJuZXRlcy5kZWZhdWx0CmNsdXN0ZXJfZm9ybWF0aW9uLm5vZGVfY2xlYW51cC5pbnRlcnZhbCA9IDEwCmNsdXN0ZXJfZm9ybWF0aW9uLm5vZGVfY2xlYW51cC5vbmx5X2xvZ193YXJuaW5nID0gdHJ1ZQpjbHVzdGVyX3BhcnRpdGlvbl9oYW5kbGluZyA9IGF1dG9oZWFsCiMgcXVldWUgbWFzdGVyIGxvY2F0b3IKcXVldWVfbWFzdGVyX2xvY2F0b3IgPSBtaW4tbWFzdGVycwojIGVuYWJsZSBndWVzdCB1c2VyCmxvb3BiYWNrX3VzZXJzLmd1ZXN0ID0gZmFsc2UKI2RlZmF1bHRfdmhvc3QgPSBkZWZhdWx0LXZob3N0CiNkaXNrX2ZyZWVfbGltaXQuYWJzb2x1dGUgPSA1ME1C
---
# Source: ms/charts/rabbitmq/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-11.3.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  rabbitmq-password: "bXlzZWNyZXRwYXNzd29yZA=="
  
  rabbitmq-erlang-cookie: "YzM5SGhuWmZXRGJXM3BvZFM5aFVNbGhTOXJZSEVmNDE="
---
# Source: ms/templates/secret.yaml
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: auth-service-secret
data:
  ConnectionStrings__Postgres: "U2VydmVyPXBvc3RncmVzO1BvcnQ9NTQzMjtVc2VyaWQ9cG9zdGdyZXM7UGFzc3dvcmQ9bXlzZWNyZXRwYXNzd29yZDtEYXRhYmFzZT1Nc0F1dGg7Ow=="
  Jwt__PrivateKey: "TUlJRXBRSUJBQUtDQVFFQXRrUjZvZnh0TDhTUEtqSEZhT0o5Q2NNZUFQNWJJK0JGMzNTbkZYSkhLS0pOTTdWVEp5NjRkWWZQUmVqMXZSVGhzbXZvMUhkZWpWR2ZhZlRCd2FyenlOZ0l5emVoaW1uYTZrR0lYNCtycXhYT3pGTkF2SUJ0UW5pZnRHaHZ6emhUaHdZWTErYlNNaGxGYkZRTlF5ZFcxcjgyeE1kQUx3anhVTGtwcmVvTENPMitNK2NnMkp4b213TDVSbk54RWNEcUl0a0tBREVpMXBMekRkWnZyK2lodkZDdHh3eUx1clB2U0FQSWMrMFR0dGVreE9EM0lLMGFJR3FwaC9NNUpLZlNrazBQQWJhWlFtMGwranh4WWdUbkVYR0dmdUpHNlVPSmI2S0IyMTBnK0xlU3NwNlR3VitLMlphaStQYUYwTGVyTUFHL1dBZGRVVzdaV0xXYWFTMGt2d0lEQVFBQkFvSUJBRmRZNCtnakgzUkgzMUFhUC8rdW9ydDk3VEFPdFVDeEp1c2FiVVFDMndVbkdwWlFMRVJYeUlCU2tFdHhnK3FVU2tFR0k3TkdiV0tPSGpaWjNFemlqeWZPR0JERFhVQUcwS2w0dEZFUGVmWm9ZZzFiVEdmSnFCSzEyZHRNUFdEeUhsMVQxNjRINk8yblhMUzRadzZxbUp3YlVMVG13K1NHaFpibzFZZUo1TFhtNGViT1FsZjZjR3pPVlNZcTZxczNDMVV6dmdPYzBRZ0ZCNDFtLyt5Mm1icEZ5eEZGN2IxZUJSS3BsTmN0VE1uSUV1SmJ1QVR1MTF1L0J4Tmh2SlpFVFBWa0w5MlpJZDR4WHU5R0s4OVdjKzNpVGVGZUhFTzJrS2ZDK3ZBTjhaMjR1eDBuNDJXVnNDV0MvMC9KZzl1OGs2Rm03SUdjUFJRWXJkMlBNOS9DU1lrQ2dZRUE1R0dnRGVXNnh5eGhZYUQ1U09UMlBmdmFFcEQvMFQ3N1hmdi9Ddlc0dm9JVE01Z3FKcnIrR3VXdUZ5eEhyUXU5am1Wb1NoVE5HV01ha3FpM0V1UXJZaFRiSTJmbi8xcEtxSkJwZExVL1IyeThHRGJkclFnSlV1UjNqVUFVbXk1akRuU0hZMHk3ZFV3bG1TcGw5TXlBWUkvUzRkSERMdkdlSUJ1cmxnbGZhdHNDZ1lFQXpFODdYaTVXUG83VWNHRHpaWi9wU3A5K0NBOUJsVDB5VFFUZ2NEOC9xQUxia0drWFRZbXBIRU05eGZIYTY4NlRqcHNFbmtWNHNiR3BiemZJQll6RHQrKzg0aWZPZFhYMkJsN0ZQbUJZZUlIbzlKcnFDakhOU1o5Z2tVRE92Nll6cldYcXBiN1FsMUxnQmtFNkdFb0szNXBFMzdpTlh6aUZabW5tNWhuL0tPMENnWUVBZ3luS2FaRGg5NWYyaWNLUXlSdXVqS1REZHR4Ti85ZmpOL1FOWXpjQ2xtOVFKZGFqaHNEb1JYeFp3cmRNcHdiU0pDRDdoMmh3N3I2ck9VV3FkekFSOW0reDk2Q3FiazVtQ0crQUVXWXk1SXQvYjR5N1BiQWE0citTSmM2Q3h5a1ovT2hTQldiQlZybVg4bUtXVWNUTmlpZXYzci9CRUluMTNjem1lL0lBR2ZjQ2dZRUF6Qm5DMXgwM0x4dUVnaGQ0VDJkbXFST1gxZmxYclAwTGlRRjhMT1lpYzNjWFhMWi9md2dzbG4xZDhxYmY2bjNkenJKeDlLSzJKZDJ6dzlWWHpxT0d5Zk9ISCs1Z1E5dHB3WWRmU0NiN2VyZGN2eThhNnNCQnNuQ3pDYWhTWWdab3phcG90TmRnaml0T2ZURWdGaSt4bVJzRi92RGcyZVVlN3VhUXNnSDZjeWtDZ1lFQXNueCtlSzI2Tkg3TXdlTHA3anB1Vzl1b094RHNVN1haSFNmZGpEM2ltYTVTN0EzQktRcnVtVjhPQlMwU0tmWlRadEcyMG5kKysyanJVSkg4M0kyZE9iKyt6SElaeWgySHc3dmZic2RxZ0JqOWt5MlNEN2QxaHlJNVVzb1RWZDhsTXhwVjdkQkN0K1RadUUyL1Jpa0x0WllNd1A1OFN6WUhzUlFPWlRDdll0UT0K"
---
# Source: ms/templates/secret.yaml
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: notifications-service-secret
data:
  ConnectionStrings__Postgres: "U2VydmVyPXBvc3RncmVzO1BvcnQ9NTQzMjtVc2VyaWQ9cG9zdGdyZXM7UGFzc3dvcmQ9bXlzZWNyZXRwYXNzd29yZDtEYXRhYmFzZT1Nc05vdGlmaWNhdGlvbnM7"
---
# Source: ms/templates/secret.yaml
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: post-service-secret
data:
  ConnectionStrings__Postgres: "U2VydmVyPXBvc3RncmVzO1BvcnQ9NTQzMjtVc2VyaWQ9cG9zdGdyZXM7UGFzc3dvcmQ9bXlzZWNyZXRwYXNzd29yZDtEYXRhYmFzZT1Nc1Bvc3RzOw=="
---
# Source: ms/templates/secret.yaml
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: rabbitmq-secret
data:
  ConnectionStrings__RabbitMQ: "YW1xcDovL3JhYmJpdG1xOm15c2VjcmV0cGFzc3dvcmRAcmFiYml0bXE6NTY3Mg=="
---
# Source: ms/templates/secret.yaml
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: user-service-secret
data:
  ConnectionStrings__Postgres: "U2VydmVyPXBvc3RncmVzO1BvcnQ9NTQzMjtVc2VyaWQ9cG9zdGdyZXM7UGFzc3dvcmQ9bXlzZWNyZXRwYXNzd29yZDtEYXRhYmFzZT1Nc1VzZXJzOw=="
---
# Source: ms/templates/config-map.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: common
data:
  Jwt__Audience: "superpost"
  Jwt__Issuer: "superpost"
  Jwt__PublicKey: "MIIBCgKCAQEAtkR6ofxtL8SPKjHFaOJ9CcMeAP5bI+BF33SnFXJHKKJNM7VTJy64dYfPRej1vRThsmvo1HdejVGfafTBwarzyNgIyzehimna6kGIX4+rqxXOzFNAvIBtQniftGhvzzhThwYY1+bSMhlFbFQNQydW1r82xMdALwjxULkpreoLCO2+M+cg2JxomwL5RnNxEcDqItkKADEi1pLzDdZvr+ihvFCtxwyLurPvSAPIc+0TttekxOD3IK0aIGqph/M5JKfSkk0PAbaZQm0l+jxxYgTnEXGGfuJG6UOJb6KB210g+LeSsp6TwV+K2Zai+PaF0LerMAG/WAddUW7ZWLWaaS0kvwIDAQAB"
  PostService__Url: "http://local-post-service"
  UserService__Url: "http://local-user-service"
---
# Source: ms/charts/rabbitmq/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: rabbitmq-endpoint-reader
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-11.3.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create"]
---
# Source: ms/charts/rabbitmq/templates/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: rabbitmq-endpoint-reader
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-11.3.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: rabbitmq
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: rabbitmq-endpoint-reader
---
# Source: ms/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: postgres-hl
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.1.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
# Source: ms/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.1.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: primary
---
# Source: ms/charts/rabbitmq/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-11.3.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  clusterIP: None
  ports:
    - name: epmd
      port: 4369
      targetPort: epmd
    - name: amqp
      port: 5672
      targetPort: amqp
    - name: dist
      port: 25672
      targetPort: dist
    - name: http-stats
      port: 15672
      targetPort: stats
  selector: 
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: release-name
  publishNotReadyAddresses: true
---
# Source: ms/charts/rabbitmq/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-11.3.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: amqp
      port: 5672
      targetPort: amqp
      nodePort: null
    - name: epmd
      port: 4369
      targetPort: epmd
      nodePort: null
    - name: dist
      port: 25672
      targetPort: dist
      nodePort: null
    - name: http-stats
      port: 15672
      targetPort: stats
      nodePort: null
  selector: 
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: release-name
---
# Source: ms/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-auth-service
  labels:
    app.kubernetes.io/name: auth-service
    app.kubernetes.io/instance: release-name
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
  selector:
    app.kubernetes.io/name: auth-service
    app.kubernetes.io/instance: release-name
---
# Source: ms/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-client
  labels:
    app.kubernetes.io/name: client
    app.kubernetes.io/instance: release-name
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
  selector:
    app.kubernetes.io/name: client
    app.kubernetes.io/instance: release-name
---
# Source: ms/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-notifications-service
  labels:
    app.kubernetes.io/name: notifications-service
    app.kubernetes.io/instance: release-name
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
  selector:
    app.kubernetes.io/name: notifications-service
    app.kubernetes.io/instance: release-name
---
# Source: ms/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-notifier-service
  labels:
    app.kubernetes.io/name: notifier-service
    app.kubernetes.io/instance: release-name
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
  selector:
    app.kubernetes.io/name: notifier-service
    app.kubernetes.io/instance: release-name
---
# Source: ms/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-post-service
  labels:
    app.kubernetes.io/name: post-service
    app.kubernetes.io/instance: release-name
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
  selector:
    app.kubernetes.io/name: post-service
    app.kubernetes.io/instance: release-name
---
# Source: ms/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-timeline-service
  labels:
    app.kubernetes.io/name: timeline-service
    app.kubernetes.io/instance: release-name
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
  selector:
    app.kubernetes.io/name: timeline-service
    app.kubernetes.io/instance: release-name
---
# Source: ms/templates/services.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-user-service
  labels:
    app.kubernetes.io/name: user-service
    app.kubernetes.io/instance: release-name
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
  selector:
    app.kubernetes.io/name: user-service
    app.kubernetes.io/instance: release-name
---
# Source: ms/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-auth-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: auth-service
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: auth-service
        app.kubernetes.io/instance: release-name
    spec:
      initContainers:
      
        - name: wait-for-pg
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          command: ['sh', '-c', 'until nc -vz ${POD_NAME}.${POD_NAMESPACE} 5432; do echo "Waiting for postgres..."; sleep 3; done;']
          env:
            - name: POD_NAME
              value: postgres
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
        - name: mianni-ms-services-auth-migrator
          image: mianni/ms-services:auth-migrator
          imagePullPolicy: Always
          envFrom:
            - secretRef:
                name: auth-service-secret
      
      
      containers:
        - image: mianni/ms-services:auth
          name: release-name-auth-service
          imagePullPolicy: Always
          ports:
          - containerPort: 5000
            name: http
          envFrom:
            - configMapRef:
                name: common
            - secretRef:
                name: auth-service-secret
---
# Source: ms/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-client
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: client
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: client
        app.kubernetes.io/instance: release-name
    spec:
      initContainers:
      
      
      containers:
        - image: mianni/ms-services:client
          name: release-name-client
          imagePullPolicy: Always
          ports:
          - containerPort: 80
            name: http
          envFrom:
---
# Source: ms/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-notifications-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: notifications-service
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: notifications-service
        app.kubernetes.io/instance: release-name
    spec:
      initContainers:
      
        - name: wait-for-pg
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          command: ['sh', '-c', 'until nc -vz ${POD_NAME}.${POD_NAMESPACE} 5432; do echo "Waiting for postgres..."; sleep 3; done;']
          env:
            - name: POD_NAME
              value: postgres
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
        - name: mianni-ms-services-notifications-migrator
          image: mianni/ms-services:notifications-migrator
          imagePullPolicy: Always
          envFrom:
            - secretRef:
                name: notifications-service-secret
      
      
        - name: wait-for-pg
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          command: ['sh', '-c', 'until nc -vz ${POD_NAME}.${POD_NAMESPACE} 5672; do echo "Waiting for postgres..."; sleep 3; done;']
          env:
            - name: POD_NAME
              value: rabbitmq
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
      
      containers:
        - image: mianni/ms-services:notifications
          name: release-name-notifications-service
          imagePullPolicy: Always
          ports:
          - containerPort: 5000
            name: http
          envFrom:
            - configMapRef:
                name: common
            - secretRef:
                name: notifications-service-secret
            - secretRef:
                name: rabbitmq-secret
---
# Source: ms/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-notifier-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: notifier-service
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: notifier-service
        app.kubernetes.io/instance: release-name
    spec:
      initContainers:
      
      
        - name: wait-for-pg
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          command: ['sh', '-c', 'until nc -vz ${POD_NAME}.${POD_NAMESPACE} 5672; do echo "Waiting for postgres..."; sleep 3; done;']
          env:
            - name: POD_NAME
              value: rabbitmq
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
      
      containers:
        - image: mianni/ms-services:notifier
          name: release-name-notifier-service
          imagePullPolicy: Always
          ports:
          - containerPort: 5000
            name: http
          envFrom:
            - configMapRef:
                name: common
---
# Source: ms/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-post-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: post-service
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: post-service
        app.kubernetes.io/instance: release-name
    spec:
      initContainers:
      
        - name: wait-for-pg
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          command: ['sh', '-c', 'until nc -vz ${POD_NAME}.${POD_NAMESPACE} 5432; do echo "Waiting for postgres..."; sleep 3; done;']
          env:
            - name: POD_NAME
              value: postgres
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
        - name: mianni-ms-services-post-migrator
          image: mianni/ms-services:post-migrator
          imagePullPolicy: Always
          envFrom:
            - secretRef:
                name: post-service-secret
      
      
        - name: wait-for-pg
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          command: ['sh', '-c', 'until nc -vz ${POD_NAME}.${POD_NAMESPACE} 5672; do echo "Waiting for postgres..."; sleep 3; done;']
          env:
            - name: POD_NAME
              value: rabbitmq
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
      
      containers:
        - image: mianni/ms-services:post
          name: release-name-post-service
          imagePullPolicy: Always
          ports:
          - containerPort: 5000
            name: http
          envFrom:
            - configMapRef:
                name: common
            - secretRef:
                name: post-service-secret
            - secretRef:
                name: rabbitmq-secret
---
# Source: ms/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-timeline-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: timeline-service
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: timeline-service
        app.kubernetes.io/instance: release-name
    spec:
      initContainers:
      
      
      containers:
        - image: mianni/ms-services:timeline
          name: release-name-timeline-service
          imagePullPolicy: Always
          ports:
          - containerPort: 5000
            name: http
          envFrom:
            - configMapRef:
                name: common
---
# Source: ms/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-user-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: user-service
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: user-service
        app.kubernetes.io/instance: release-name
    spec:
      initContainers:
      
        - name: wait-for-pg
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          command: ['sh', '-c', 'until nc -vz ${POD_NAME}.${POD_NAMESPACE} 5432; do echo "Waiting for postgres..."; sleep 3; done;']
          env:
            - name: POD_NAME
              value: postgres
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
        - name: mianni-ms-services-user-migrator
          image: mianni/ms-services:user-migrator
          imagePullPolicy: Always
          envFrom:
            - secretRef:
                name: user-service-secret
      
      
      containers:
        - image: mianni/ms-services:user
          name: release-name-user-service
          imagePullPolicy: Always
          ports:
          - containerPort: 5000
            name: http
          envFrom:
            - configMapRef:
                name: common
            - secretRef:
                name: user-service-secret
---
# Source: ms/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.1.2
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  replicas: 1
  serviceName: postgres-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: postgres
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-12.1.2
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      initContainers:
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:15.1.0-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres
                  key: postgres-password
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: ms/charts/rabbitmq/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-11.3.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  serviceName: rabbitmq-headless
  podManagementPolicy: OrderedReady
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: rabbitmq
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rabbitmq
        helm.sh/chart: rabbitmq-11.3.0
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
      annotations:
        checksum/config: 79b703e65fa00f2077a1102a6e5f5c80a4b23af1e08f9a0d690306e99c586436
        checksum/secret: 8c64e981f6d3cc8824298ec5d1711f9a034858f31fede9c219514fd63d9f5a06
    spec:
      
      serviceAccountName: rabbitmq
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: rabbitmq
                    app.kubernetes.io/instance: release-name
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      terminationGracePeriodSeconds: 120
      initContainers:
      containers:
        - name: rabbitmq
          image: docker.io/bitnami/rabbitmq:3.11.5-debian-11-r2
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -ec
                  - |
                    if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then
                        /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t "120" -d "false"
                    else
                        rabbitmqctl stop_app
                    fi
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: rabbitmq-headless
            - name: K8S_ADDRESS_TYPE
              value: hostname
            - name: RABBITMQ_FORCE_BOOT
              value: "no"
            - name: RABBITMQ_NODE_NAME
              value: "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: K8S_HOSTNAME_SUFFIX
              value: ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: RABBITMQ_MNESIA_DIR
              value: "/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)"
            - name: RABBITMQ_LDAP_ENABLE
              value: "no"
            - name: RABBITMQ_LOGS
              value: "-"
            - name: RABBITMQ_ULIMIT_NOFILES
              value: "65536"
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: RABBITMQ_ERL_COOKIE
              valueFrom:
                secretKeyRef:
                  name: rabbitmq
                  key: rabbitmq-erlang-cookie
            - name: RABBITMQ_LOAD_DEFINITIONS
              value: "no"
            - name: RABBITMQ_DEFINITIONS_FILE
              value: "/app/load_definition.json"
            - name: RABBITMQ_SECURE_PASSWORD
              value: "yes"
            - name: RABBITMQ_USERNAME
              value: "rabbitmq"
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_PLUGINS
              value: "rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap"
          envFrom:
          ports:
            - name: amqp
              containerPort: 5672
            - name: dist
              containerPort: 25672
            - name: stats
              containerPort: 15672
            - name: epmd
              containerPort: 4369
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 120
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 20
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q ping
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 20
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: configuration
              mountPath: /bitnami/rabbitmq/conf
            - name: data
              mountPath: /bitnami/rabbitmq/mnesia
      volumes:
        - name: configuration
          projected:
            sources:
              - secret:
                  name: rabbitmq-config
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/name: rabbitmq
          app.kubernetes.io/instance: release-name
      spec:
        accessModes:
            - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: ms/templates/ingress-sse.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ms-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-read-timeout: "21600"
    nginx.ingress.kubernetes.io/eventsource: "true"
spec:
  rules:
    - host: ms.krolebord.online
      http:
        paths:
          - path: /api/notifier
            pathType: Prefix
            backend:
              service:
                name: release-name-notifier-service
                port:
                  name: http
---
# Source: ms/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ms-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  rules:
    - host: ms.krolebord.online
      http:
        paths:
          - path: /api/auth
            pathType: Prefix
            backend:
              service:
                name: release-name-auth-service
                port:
                  name: http
          - path: /
            pathType: Prefix
            backend:
              service:
                name: release-name-client
                port:
                  name: http
          - path: /api/notifications
            pathType: Prefix
            backend:
              service:
                name: release-name-notifications-service
                port:
                  name: http
          - path: /api/posts
            pathType: Prefix
            backend:
              service:
                name: release-name-post-service
                port:
                  name: http
          - path: /api/timeline
            pathType: Prefix
            backend:
              service:
                name: release-name-timeline-service
                port:
                  name: http
          - path: /api/users
            pathType: Prefix
            backend:
              service:
                name: release-name-user-service
                port:
                  name: http
---
# Source: ms/templates/destination-rule.yaml
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: release-name-auth-service-destination
spec:
  host: release-name-auth-service
  trafficPolicy:
    outlierDetection:
      consecutive5xxErrors: 5 
      interval: 10s
      baseEjectionTime: 30s
      maxEjectionPercent: 80
---
# Source: ms/templates/destination-rule.yaml
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: release-name-client-destination
spec:
  host: release-name-client
  trafficPolicy:
    outlierDetection:
      consecutive5xxErrors: 5 
      interval: 10s
      baseEjectionTime: 30s
      maxEjectionPercent: 80
---
# Source: ms/templates/destination-rule.yaml
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: release-name-notifications-service-destination
spec:
  host: release-name-notifications-service
  trafficPolicy:
    outlierDetection:
      consecutive5xxErrors: 5 
      interval: 10s
      baseEjectionTime: 30s
      maxEjectionPercent: 80
---
# Source: ms/templates/destination-rule.yaml
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: release-name-notifier-service-destination
spec:
  host: release-name-notifier-service
  trafficPolicy:
    outlierDetection:
      consecutive5xxErrors: 5 
      interval: 10s
      baseEjectionTime: 30s
      maxEjectionPercent: 80
---
# Source: ms/templates/destination-rule.yaml
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: release-name-post-service-destination
spec:
  host: release-name-post-service
  trafficPolicy:
    outlierDetection:
      consecutive5xxErrors: 5 
      interval: 10s
      baseEjectionTime: 30s
      maxEjectionPercent: 80
---
# Source: ms/templates/destination-rule.yaml
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: release-name-timeline-service-destination
spec:
  host: release-name-timeline-service
  trafficPolicy:
    outlierDetection:
      consecutive5xxErrors: 5 
      interval: 10s
      baseEjectionTime: 30s
      maxEjectionPercent: 80
---
# Source: ms/templates/destination-rule.yaml
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: release-name-user-service-destination
spec:
  host: release-name-user-service
  trafficPolicy:
    outlierDetection:
      consecutive5xxErrors: 5 
      interval: 10s
      baseEjectionTime: 30s
      maxEjectionPercent: 80
---
# Source: ms/templates/virtual-service.yaml
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: release-name-auth-service-virtual
spec:
  hosts:
    - release-name-auth-service
  http:
    - route:
        - destination:
            host: release-name-auth-service
      timeout: 5s
      retries:
        attempts: 3
        retryOn: 5xx
        perTryTimeout: 5s
---
# Source: ms/templates/virtual-service.yaml
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: release-name-client-virtual
spec:
  hosts:
    - release-name-client
  http:
    - route:
        - destination:
            host: release-name-client
---
# Source: ms/templates/virtual-service.yaml
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: release-name-notifications-service-virtual
spec:
  hosts:
    - release-name-notifications-service
  http:
    - route:
        - destination:
            host: release-name-notifications-service
      timeout: 5s
      retries:
        attempts: 3
        retryOn: 5xx
        perTryTimeout: 5s
---
# Source: ms/templates/virtual-service.yaml
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: release-name-notifier-service-virtual
spec:
  hosts:
    - release-name-notifier-service
  http:
    - route:
        - destination:
            host: release-name-notifier-service
      timeout: 5s
      retries:
        attempts: 3
        retryOn: 5xx
        perTryTimeout: 5s
---
# Source: ms/templates/virtual-service.yaml
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: release-name-post-service-virtual
spec:
  hosts:
    - release-name-post-service
  http:
    - route:
        - destination:
            host: release-name-post-service
      timeout: 5s
      retries:
        attempts: 3
        retryOn: 5xx
        perTryTimeout: 5s
---
# Source: ms/templates/virtual-service.yaml
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: release-name-timeline-service-virtual
spec:
  hosts:
    - release-name-timeline-service
  http:
    - route:
        - destination:
            host: release-name-timeline-service
      timeout: 5s
      retries:
        attempts: 3
        retryOn: 5xx
        perTryTimeout: 5s
---
# Source: ms/templates/virtual-service.yaml
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: release-name-user-service-virtual
spec:
  hosts:
    - release-name-user-service
  http:
    - route:
        - destination:
            host: release-name-user-service
      timeout: 5s
      retries:
        attempts: 3
        retryOn: 5xx
        perTryTimeout: 5s
